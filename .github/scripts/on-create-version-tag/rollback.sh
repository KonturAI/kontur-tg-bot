#!/bin/bash

# ============================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞
# ============================================

execute_rollback() {
    local target_tag=$1

    log_info "–û—Ç–∫–∞—Ç" "–ó–∞–ø—É—Å–∫ –æ—Ç–∫–∞—Ç–∞ –∫ –≤–µ—Ä—Å–∏–∏ $target_tag –Ω–∞ $STAGE_HOST"
    log_info "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSH –∫ root@$STAGE_HOST:22"

    SSH_OUTPUT=$(sshpass -p "$STAGE_PASSWORD" ssh -o StrictHostKeyChecking=no root@$STAGE_HOST -p 22 \
        SERVICE_NAME="$SERVICE_NAME" \
        TARGET_TAG="$PREVIOUS_TAG" \
        SYSTEM_REPO="$SYSTEM_REPO" \
        SERVICE_PREFIX="$SERVICE_PREFIX" \
        STAGE_DOMAIN="$STAGE_DOMAIN" \
        bash << 'EOFMAIN'
set -e

# ============================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
# ============================================

LOG_DIR="/var/log/deployments/rollback/$SERVICE_NAME"
LOG_FILE="$LOG_DIR/$TARGET_TAG-rollback.log"

init_logging() {
    mkdir -p "$LOG_DIR"
    echo "========================================" >> "$LOG_FILE"
    echo "–û—Ç–∫–∞—Ç –Ω–∞—á–∞—Ç: $(date '+%Y-%m-%d %H:%M:%S')" >> "$LOG_FILE"
    echo "–°–µ—Ä–≤–∏—Å: $SERVICE_NAME" >> "$LOG_FILE"
    echo "–¶–µ–ª–µ–≤–æ–π —Ç–µ–≥: $TARGET_TAG" >> "$LOG_FILE"
    echo "========================================" >> "$LOG_FILE"
}

log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local prefix=""

    case $level in
        "INFO") prefix="‚ÑπÔ∏è" ;;
        "SUCCESS") prefix="‚úÖ" ;;
        "ERROR") prefix="‚ùå" ;;
        "WARNING") prefix="‚ö†Ô∏è" ;;
    esac

    echo "[$timestamp] [$level] $prefix $message" | tee -a "$LOG_FILE"
}

# ============================================
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ============================================

save_current_state() {
    log_message "INFO" "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º"

    cd loom/$SERVICE_NAME

    local current_ref=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
    log_message "INFO" "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $current_ref"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "$current_ref" > /tmp/${SERVICE_NAME}_rollback_previous.txt

    log_message "SUCCESS" "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $current_ref"
}

# ============================================
# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git –¥–ª—è –æ—Ç–∫–∞—Ç–∞
# ============================================

update_repository_for_rollback() {
    log_message "INFO" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–∞ $TARGET_TAG"

    cd loom/$SERVICE_NAME

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if git tag -l | grep -q "^$TARGET_TAG$"; then
        log_message "INFO" "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞ $TARGET_TAG"
        git tag -d $TARGET_TAG >> "$LOG_FILE" 2>&1
    fi

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    log_message "INFO" "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ origin"
    git fetch origin >> "$LOG_FILE" 2>&1

    log_message "INFO" "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    git fetch origin --tags --force >> "$LOG_FILE" 2>&1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–≥–∞
    if ! git tag -l | grep -q "^$TARGET_TAG$"; then
        log_message "ERROR" "–¢–µ–≥ $TARGET_TAG –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è"
        log_message "INFO" "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):"
        git tag -l | tail -10 | tee -a "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–¢–µ–≥ $TARGET_TAG –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫–∞—Ç–∞"
}

checkout_rollback_tag() {
    log_message "INFO" "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–≥ –æ—Ç–∫–∞—Ç–∞ $TARGET_TAG"

    git checkout $TARGET_TAG >> "$LOG_FILE" 2>&1

    if [ $? -ne 0 ]; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–≥ $TARGET_TAG"
        tail -20 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ–≥ –æ—Ç–∫–∞—Ç–∞ $TARGET_TAG"
}

cleanup_branches() {
    log_message "INFO" "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫"

    git for-each-ref --format='%(refname:short)' refs/heads | \
        grep -v -E "^(main|master)$" | \
        xargs -r git branch -D >> "$LOG_FILE" 2>&1

    log_message "INFO" "–û—á–∏—Å—Ç–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–µ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    git remote prune origin >> "$LOG_FILE" 2>&1

    log_message "SUCCESS" "–û—á–∏—Å—Ç–∫–∞ git –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# ============================================
# –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ============================================

rollback_migrations() {
    log_message "INFO" "–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –≤–µ—Ä—Å–∏–∏ $TARGET_TAG"

    docker run --rm \
        --network net \
        -v ./:/app \
        -w /app \
        -e PREVIOUS_TAG="$TARGET_TAG" \
        --env-file ../$SYSTEM_REPO/env/.env.app \
        --env-file ../$SYSTEM_REPO/env/.env.db \
        --env-file ../$SYSTEM_REPO/env/.env.monitoring \
        python:3.11-slim \
        bash -c '
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏..."
            cd .github && pip install -r requirements.txt > /dev/null 2>&1 && cd ..
            echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            echo "üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π..."
            python internal/migration/run.py stage --command down --version $PREVIOUS_TAG
        ' >> "$LOG_FILE" 2>&1

    local migration_exit_code=$?

    if [ $migration_exit_code -ne 0 ]; then
        log_message "ERROR" "–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ $migration_exit_code"
        log_message "INFO" "–õ–æ–≥–∏ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
        tail -50 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# ============================================
# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
# ============================================

rebuild_container_for_rollback() {
    log_message "INFO" "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ –æ—Ç–∫–∞—Ç–∞"

    cd ../$SYSTEM_REPO

    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

    log_message "INFO" "–ó–∞–ø—É—Å–∫ docker compose build –¥–ª—è $SERVICE_NAME (–≤–µ—Ä—Å–∏—è –æ—Ç–∫–∞—Ç–∞)"
    docker compose -f ./docker-compose/app.yaml up -d --build $SERVICE_NAME >> "$LOG_FILE" 2>&1

    if [ $? -ne 0 ]; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å/–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ"
        log_message "INFO" "–õ–æ–≥–∏ Docker (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
        tail -50 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –≤–µ—Ä—Å–∏–µ–π –æ—Ç–∫–∞—Ç–∞"
}

check_health() {
    local url="$STAGE_DOMAIN$SERVICE_PREFIX/health"
    local http_code=$(curl -f -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)

    if [ "$http_code" = "200" ]; then
        return 0
    else
        return 1
    fi
}

wait_for_health_after_rollback() {
    log_message "INFO" "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞"

    sleep 10

    local max_attempts=5
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        log_message "INFO" "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ $attempt/$max_attempts"

        if check_health; then
            log_message "SUCCESS" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ - —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞"
            return 0
        else
            log_message "WARNING" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥..."
            sleep 20
        fi

        ((attempt++))
    done

    log_message "ERROR" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    log_message "INFO" "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
    docker logs --tail 50 $SERVICE_NAME | tee -a "$LOG_FILE"
    exit 1
}

# ============================================
# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ (–¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
# ============================================

reapply_current_migrations() {
    log_message "INFO" "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"

    docker run --rm \
        --network net \
        -v ./:/app \
        -w /app \
        --env-file ../$SYSTEM_REPO/env/.env.app \
        --env-file ../$SYSTEM_REPO/env/.env.db \
        --env-file ../$SYSTEM_REPO/env/.env.monitoring \
        python:3.11-slim \
        bash -c '
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            cd .github && pip install -r requirements.txt > /dev/null 2>&1 && cd ..
            echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            echo "üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
            python internal/migration/run.py stage
        ' >> "$LOG_FILE" 2>&1

    local migration_exit_code=$?

    if [ $migration_exit_code -ne 0 ]; then
        log_message "WARNING" "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
    else
        log_message "SUCCESS" "–ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
    fi
}

# ============================================
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏
# ============================================

restore_to_original() {
    log_message "INFO" "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –æ—Ç–∫–∞—Ç–∞"

    cd loom/$SERVICE_NAME

    local previous_ref=$(cat /tmp/${SERVICE_NAME}_rollback_previous.txt 2>/dev/null || echo "")

    if [ -z "$previous_ref" ]; then
        log_message "WARNING" "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        return 1
    fi

    log_message "INFO" "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫: $previous_ref"

    git checkout "$previous_ref" >> "$LOG_FILE" 2>&1

    if [ $? -ne 0 ]; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $previous_ref"
        return 1
    fi

    log_message "SUCCESS" "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $previous_ref"

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    reapply_current_migrations

    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    cd ../$SYSTEM_REPO
    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

    log_message "INFO" "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π"
    docker compose -f ./docker-compose/app.yaml up -d --build $SERVICE_NAME >> "$LOG_FILE" 2>&1

    log_message "SUCCESS" "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm -f /tmp/${SERVICE_NAME}_rollback_previous.txt

    return 0
}

# ============================================
# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–∞—Ç–∞
# ============================================

main() {
    init_logging
    log_message "INFO" "üîÑ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –æ—Ç–∫–∞—Ç–∞ –∫ –≤–µ—Ä—Å–∏–∏ $TARGET_TAG"

    save_current_state
    update_repository_for_rollback
    checkout_rollback_tag
    cleanup_branches
    rollback_migrations
    rebuild_container_for_rollback
    wait_for_health_after_rollback

    log_message "SUCCESS" "üéâ –¢–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!"
    log_message "INFO" "–í–µ—Ä—Å–∏—è –æ—Ç–∫–∞—Ç–∞: $TARGET_TAG –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
    log_message "INFO" "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏..."

    restore_to_original

    log_message "SUCCESS" "üéâ –¶–∏–∫–ª —Ç–µ—Å—Ç–∞ –æ—Ç–∫–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à—ë–Ω!"
    log_message "INFO" "–§–∞–π–ª –ª–æ–≥–æ–≤: $LOG_FILE"

    echo ""
    echo "========================================="
    echo "üìã –ò—Ç–æ–≥–∏ –æ—Ç–∫–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫):"
    echo "========================================="
    tail -30 "$LOG_FILE"
}

main
EOFMAIN
)

    local ssh_exit_code=$?

    if [ $ssh_exit_code -ne 0 ]; then
        log_error "–û—Ç–∫–∞—Ç" "SSH –æ—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ $ssh_exit_code"
        echo "$SSH_OUTPUT"
        exit 1
    fi

    log_success "–û—Ç–∫–∞—Ç" "–¢–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ $STAGE_HOST"
}

# ============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
# ============================================

verify_rollback_success() {
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞" "–¢–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ –∫ $1 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
    log_info "–°–µ—Ä–≤–µ—Ä" "$STAGE_HOST"
    log_info "–í–µ—Ä—Å–∏—è –æ—Ç–∫–∞—Ç–∞" "$1"
    log_info "–°—Ç–∞—Ç—É—Å" "–û—Ç–∫–∞—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω, –∏—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    log_info "–§–∞–π–ª –ª–æ–≥–æ–≤" "/var/log/deployments/rollback/$SERVICE_NAME/$1-rollback.log"
}

handle_rollback_failure() {
    log_error "–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞" "–¢–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ –∫ $1 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
    log_info "–°–µ—Ä–≤–µ—Ä" "$STAGE_HOST"
    log_info "–¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è" "$1"
    log_warning "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ" "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"
    log_info "–§–∞–π–ª –ª–æ–≥–æ–≤" "/var/log/deployments/rollback/$SERVICE_NAME/$1-rollback.log"
}

# ============================================
# –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ–±—ë—Ä—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞
# ============================================

rollback_with_status_tracking() {
    local target_tag=$1

    log_info "–û—Ç–∫–∞—Ç" "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞—Ç–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"
    log_info "–¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è" "$target_tag"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –æ—Ç–∫–∞—Ç–∞
    update_release_status "stage_test_rollback"

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞
    execute_rollback "$target_tag"

    if [ $? -eq 0 ]; then
        update_release_status "manual_testing"
        verify_rollback_success "$target_tag"
    else
        update_release_status "stage_rollback_test_failed"
        handle_rollback_failure "$target_tag"
        exit 1
    fi
}