#!/bin/bash

source .github/scripts/load_config.sh

# ============================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# ============================================

deploy_to_server() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ" "–ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è $TAG_NAME –Ω–∞ $STAGE_HOST"
    log_info "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSH –∫ root@$STAGE_HOST:22"

    SSH_OUTPUT=$(sshpass -p "$STAGE_PASSWORD" ssh -o StrictHostKeyChecking=no root@$STAGE_HOST -p 22 << 'EOFMAIN'
set -e

# ============================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
# ============================================

LOG_DIR="/var/log/deployments/${{ env.SERVICE_NAME }}"
LOG_FILE="$LOG_DIR/${{ env.TAG_NAME }}.log"

init_logging() {
    mkdir -p "$LOG_DIR"
    echo "========================================" >> "$LOG_FILE"
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: $(date '+%Y-%m-%d %H:%M:%S')" >> "$LOG_FILE"
    echo "–°–µ—Ä–≤–∏—Å: ${{ env.SERVICE_NAME }}" >> "$LOG_FILE"
    echo "–¢–µ–≥: ${{ env.TAG_NAME }}" >> "$LOG_FILE"
    echo "========================================" >> "$LOG_FILE"
}

log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local prefix=""

    case $level in
        "INFO") prefix="‚ÑπÔ∏è" ;;
        "SUCCESS") prefix="‚úÖ" ;;
        "ERROR") prefix="‚ùå" ;;
        "WARNING") prefix="‚ö†Ô∏è" ;;
    esac

    echo "[$timestamp] [$level] $prefix $message" | tee -a "$LOG_FILE"
}

# ============================================
# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Git
# ============================================

update_repository() {
    log_message "INFO" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤"

    cd loom/${{ env.SERVICE_NAME }}

    local current_ref=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
    log_message "INFO" "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ git: $current_ref"

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if git tag -l | grep -q "^${{ env.TAG_NAME }}$"; then
        log_message "INFO" "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞ ${{ env.TAG_NAME }}"
        git tag -d ${{ env.TAG_NAME }} >> "$LOG_FILE" 2>&1
    fi

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    log_message "INFO" "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ origin"
    git fetch origin >> "$LOG_FILE" 2>&1

    log_message "INFO" "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    git fetch origin --tags --force >> "$LOG_FILE" 2>&1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–≥–∞
    if ! git tag -l | grep -q "^${{ env.TAG_NAME }}$"; then
        log_message "ERROR" "–¢–µ–≥ ${{ env.TAG_NAME }} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è"
        log_message "INFO" "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):"
        git tag -l | tail -10 | tee -a "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–¢–µ–≥ ${{ env.TAG_NAME }} –¥–æ—Å—Ç—É–ø–µ–Ω"
}

checkout_tag() {
    log_message "INFO" "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–≥ ${{ env.TAG_NAME }}"

    git checkout ${{ env.TAG_NAME }} >> "$LOG_FILE" 2>&1

    if [ $? -ne 0 ]; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–≥ ${{ env.TAG_NAME }}"
        tail -20 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ–≥ ${{ env.TAG_NAME }}"
}

cleanup_branches() {
    log_message "INFO" "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫"

    git for-each-ref --format='%(refname:short)' refs/heads | \
        grep -v -E "^(main|master)$" | \
        xargs -r git branch -D >> "$LOG_FILE" 2>&1

    log_message "INFO" "–û—á–∏—Å—Ç–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–µ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    git remote prune origin >> "$LOG_FILE" 2>&1

    log_message "SUCCESS" "–û—á–∏—Å—Ç–∫–∞ git –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# ============================================
# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ============================================

run_migrations() {
    log_message "INFO" "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stage –æ–∫—Ä—É–∂–µ–Ω–∏—è"

    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

    docker run --rm \
        --network net \
        -v ./:/app \
        -w /app \
        --env-file ../${{ env.SYSTEM_REPO }}/env/.env.app \
        --env-file ../${{ env.SYSTEM_REPO }}/env/.env.db \
        --env-file ../${{ env.SYSTEM_REPO }}/env/.env.monitoring \
        python:3.11-slim \
        bash -c '
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏..."
            cd .github && pip install -r requirements.txt > /dev/null 2>&1 && cd ..
            echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            echo "üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
            python internal/migration/run.py stage
        ' >> "$LOG_FILE" 2>&1

    local migration_exit_code=$?

    if [ $migration_exit_code -ne 0 ]; then
        log_message "ERROR" "–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ $migration_exit_code"
        log_message "INFO" "–õ–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
        tail -50 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# ============================================
# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
# ============================================

build_container() {
    log_message "INFO" "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"

    cd ../${{ env.SYSTEM_REPO }}

    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

    log_message "INFO" "–ó–∞–ø—É—Å–∫ docker compose build –¥–ª—è ${{ env.SERVICE_NAME }}"
    docker compose -f ./docker-compose/app.yaml up -d --build ${{ env.SERVICE_NAME }} >> "$LOG_FILE" 2>&1

    if [ $? -ne 0 ]; then
        log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å/–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
        log_message "INFO" "–õ–æ–≥–∏ Docker (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
        tail -50 "$LOG_FILE"
        exit 1
    fi

    log_message "SUCCESS" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
}

check_health() {
    local url="${{ env.STAGE_DOMAIN }}${{ env.SERVICE_PREFIX }}/health"
    local http_code=$(curl -f -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)

    if [ "$http_code" = "200" ]; then
        return 0
    else
        return 1
    fi
}

wait_for_health() {
    log_message "INFO" "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"

    sleep 10

    local max_attempts=3
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        log_message "INFO" "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ $attempt/$max_attempts"

        if check_health; then
            log_message "SUCCESS" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ - —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 0
        else
            log_message "WARNING" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥..."
            sleep 15
        fi

        ((attempt++))
    done

    log_message "ERROR" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    log_message "INFO" "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
    docker logs --tail 50 ${{ env.SERVICE_NAME }} | tee -a "$LOG_FILE"
    exit 1
}

# ============================================
# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# ============================================

main() {
    init_logging
    log_message "INFO" "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–≥–∞ ${{ env.TAG_NAME }}"

    update_repository
    checkout_tag
    cleanup_branches
    run_migrations
    build_container
    wait_for_health

    log_message "SUCCESS" "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log_message "INFO" "üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $LOG_FILE"

    echo ""
    echo "========================================="
    echo "üìã –ò—Ç–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫):"
    echo "========================================="
    tail -20 "$LOG_FILE"
}

main
EOFMAIN
)

    local ssh_exit_code=$?

    if [ $ssh_exit_code -ne 0 ]; then
        log_error "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ" "SSH —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ $ssh_exit_code"
        echo "$SSH_OUTPUT"
        exit 1
    fi

    log_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ" "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ $STAGE_HOST"
}

# ============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# ============================================

verify_deployment_success() {
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞" "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ $TAG_NAME —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    log_info "–°–µ—Ä–≤–µ—Ä" "$STAGE_HOST"
    log_info "–í–µ—Ä—Å–∏—è" "$TAG_NAME"
    log_info "–°—Ç–∞—Ç—É—Å" "–ì–æ—Ç–æ–≤–æ –∫ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    log_info "–§–∞–π–ª –ª–æ–≥–æ–≤" "/var/log/deployments/$SERVICE_NAME/$TAG_NAME.log"
}

handle_deployment_failure() {
    log_error "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è" "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ $TAG_NAME –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π"
    log_info "–°–µ—Ä–≤–µ—Ä" "$STAGE_HOST"
    log_info "–í–µ—Ä—Å–∏—è" "$TAG_NAME"
    log_warning "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ" "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"
    log_info "–§–∞–π–ª –ª–æ–≥–æ–≤" "/var/log/deployments/$SERVICE_NAME/$TAG_NAME.log"
}