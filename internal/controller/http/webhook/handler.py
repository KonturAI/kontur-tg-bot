from typing import Annotated

from aiogram import Bot, Dispatcher
from aiogram.types import Update, ReplyKeyboardMarkup, KeyboardButton
from fastapi import Header
from opentelemetry.trace import Status, StatusCode, SpanKind
from starlette.responses import JSONResponse

from internal import interface, common
from .model import *


class TelegramWebhookController(interface.ITelegramWebhookController):
    def __init__(
            self,
            tel: interface.ITelemetry,
            dp: Dispatcher,
            bot: Bot,
            state_service: interface.IStateService,
            domain: str,
            prefix: str,
            interserver_secret_key: str
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()

        self.dp = dp
        self.bot = bot
        self.state_service = state_service

        self.domain = domain
        self.prefix = prefix
        self.interserver_secret_key = interserver_secret_key

    async def bot_webhook(
            self,
            update: dict,
            x_telegram_bot_api_secret_token: Annotated[str | None, Header()] = None
    ):
        with self.tracer.start_as_current_span(
                "TelegramWebhookController.bot_webhook",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                if x_telegram_bot_api_secret_token != "secret":
                    return {"status": "error", "message": "Wrong secret token !"}

                telegram_update = Update(**update)
                await self.dp.feed_webhook_update(
                    bot=self.bot,
                    update=telegram_update)

                span.set_status(Status(StatusCode.OK))
                return None
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def bot_set_webhook(self):
        with self.tracer.start_as_current_span(
                "TelegramWebhookController.bot_set_webhook",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                await self.bot.set_webhook(
                    f'https://{self.domain}{self.prefix}/update',
                    secret_token='secret',
                    allowed_updates=["message", "callback_query"],
                )
                webhook_info = await self.bot.get_webhook_info()

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def notify_employee_added(
            self,
            body: EmployeeNotificationBody,
    ) -> JSONResponse:
        with self.tracer.start_as_current_span(
                "NotificationWebhookController.notify_employee_added",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
                if body.interserver_secret_key != self.interserver_secret_key:
                    return JSONResponse(
                        content={"status": "error", "message": "Wrong secret token !"},
                        status_code=401
                    )

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ account_id
                user_state = (await self.state_service.state_by_account_id(
                    body.account_id
                ))[0]

                # –û–±–Ω–æ–≤–ª—è–µ–º organization_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.state_service.change_user_state(
                    user_state.id,
                    organization_id=body.organization_id
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = self._format_notification_message(body)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=user_state.tg_chat_id,
                    text=message_text,
                    parse_mode="HTML"
                )

                self.logger.info(
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: user_state.tg_chat_id,
                        "account_id": body.account_id,
                        "organization_id": body.organization_id,
                        "organization_name": body.organization_name,

                    }
                )

                span.set_status(Status(StatusCode.OK))
                return JSONResponse(
                    content={"status": "ok"},
                    status_code=200
                )


            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    def _format_notification_message(self, body: EmployeeNotificationBody) -> str:

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        permissions_list = []
        if body.permissions:
            if not body.permissions.get("required_moderation", True):
                permissions_list.append("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            if body.permissions.get("autoposting_permission", False):
                permissions_list.append("‚úÖ –ê–≤—Ç–æ-–ø–æ—Å—Ç–∏–Ω–≥")
            if body.permissions.get("add_employee_permission", False):
                permissions_list.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            if body.permissions.get("edit_employee_perm_permission", False):
                permissions_list.append("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            if body.permissions.get("top_up_balance_permission", False):
                permissions_list.append("‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
            if body.permissions.get("sign_up_social_net_permission", False):
                permissions_list.append("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π")

        if not permissions_list:
            permissions_list.append("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")

        permissions_text = "\n".join(permissions_list)

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        role_names = {
            "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
            "moderator": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "owner": "–í–ª–∞–¥–µ–ª–µ—Ü"
        }
        role_display = role_names.get(body.role, body.role)

        message_text = (
            f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
            f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:\n"
            f"üè¢ <b>{body.organization_name}</b>\n\n"
            f"üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>{body.invited_by_name}</b>\n"
            f"üè∑ –í–∞—à–∞ —Ä–æ–ª—å: <b>{role_display}</b>\n\n"
            f"üìã <b>–í–∞—à–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b>\n"
            f"{permissions_text}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
        )

        return message_text
