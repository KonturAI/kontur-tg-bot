import asyncio
import sys
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

from infrastructure.pg.pg import PG
from infrastructure.telemetry.telemetry import Telemetry
from internal.config.config import Config
from internal.migration.manager import MigrationManager


async def run_migrations(target_version: str):
    cfg = Config()

    tel = Telemetry(
        cfg.log_level,
        cfg.root_path,
        cfg.environment,
        cfg.service_name + "-migration",
        cfg.service_version,
        cfg.otlp_host,
        cfg.otlp_port,
        None
    )
    logger = tel.logger()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db = PG(tel, cfg.db_user, cfg.db_pass, cfg.db_host, cfg.db_port, cfg.db_name)

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
    manager = MigrationManager(tel, db)

    try:

        logger.info(f"üéØ –¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {target_version}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        applied = await manager.get_applied_migrations()
        if applied:
            logger.info(f"üìã –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏: {', '.join(applied)}")
        else:
            logger.info("üìã –ù–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        count = await manager.migrate(target_version)

        if count > 0:
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {count} —à—Ç")
            return 0
        else:
            logger.info("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π", {"traceback": traceback.format_exc()})
        return 1
    finally:
        tel.shutdown()


async def rollback_migration(target_version: str):
    cfg = Config()

    tel = Telemetry(
        cfg.log_level,
        cfg.root_path,
        cfg.environment,
        cfg.service_name + "-migration",
        cfg.service_version,
        cfg.otlp_host,
        cfg.otlp_port,
        None
    )

    db = PG(tel, cfg.db_user, cfg.db_pass, cfg.db_host, cfg.db_port, cfg.db_name)
    manager = MigrationManager(tel, db)

    try:
        await manager.rollback_migration(target_version)
        tel.logger().info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {target_version} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω–∞")
        return 0
    except Exception as e:
        tel.logger().error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1
    finally:
        tel.shutdown()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –ë–î')
    parser.add_argument('command', choices=['up', 'down'], help='–ö–æ–º–∞–Ω–¥–∞: up –∏–ª–∏ down')
    parser.add_argument('--version', help='–í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, v1.0.1)')

    args = parser.parse_args()

    if args.command == 'up':
        exit_code = asyncio.run(run_migrations(args.version))
    else:  # down
        if not args.version:
            print("–î–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é: --version v1.0.1")
            sys.exit(1)
        exit_code = asyncio.run(rollback_migration(args.version))

    sys.exit(exit_code)