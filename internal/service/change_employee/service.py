from typing import Any

from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, StartMode

from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model


class ChangeEmployeeService(interface.IChangeEmployeeService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            bot: Bot,
            state_repo: interface.IStateRepo,
            kontur_employee_client: interface.IKonturEmployeeClient,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.bot = bot
        self.state_repo = state_repo
        self.kontur_employee_client = kontur_employee_client

    async def handle_select_employee(
            self,
            callback: CallbackQuery,
            widget: Any,
            dialog_manager: DialogManager,
            employee_id: str
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_select_employee",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                dialog_manager.dialog_data["selected_account_id"] = employee_id

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                dialog_manager.dialog_data.pop("temp_permissions", None)
                dialog_manager.dialog_data.pop("original_permissions", None)

                self.logger.info("–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º
                await dialog_manager.switch_to(model.ChangeEmployeeStates.employee_detail)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", show_alert=True)
                raise

    async def handle_search_employee(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            search_query: str
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_search_employee",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                dialog_manager.dialog_data["search_query"] = search_query.strip()

                self.logger.info("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ
                await dialog_manager.update(dialog_manager.dialog_data)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_clear_search(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_clear_search",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                dialog_manager.dialog_data.pop("search_query", None)

                self.logger.info("–ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω")

                await callback.answer("üîÑ –ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω")
                await dialog_manager.update(dialog_manager.dialog_data)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_refresh_list(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_refresh_list",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                await dialog_manager.update(dialog_manager.dialog_data)
                await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_navigate_employee(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_navigate_employee",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                button_id = button.widget_id
                all_employee_ids = dialog_manager.dialog_data.get("all_employee_ids", [])
                current_account_id = int(dialog_manager.dialog_data.get("selected_account_id"))

                if not all_employee_ids or current_account_id not in all_employee_ids:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
                    return

                current_index = all_employee_ids.index(current_account_id)

                if button_id == "prev_employee" and current_index > 0:
                    new_account_id = all_employee_ids[current_index - 1]
                elif button_id == "next_employee" and current_index < len(all_employee_ids) - 1:
                    new_account_id = all_employee_ids[current_index + 1]
                else:
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                dialog_manager.dialog_data["selected_account_id"] = new_account_id

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                dialog_manager.dialog_data.pop("temp_permissions", None)
                dialog_manager.dialog_data.pop("original_permissions", None)

                await dialog_manager.update(dialog_manager.dialog_data)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_go_to_organization_menu(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_go_to_organization_menu",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                if await self._check_alerts(dialog_manager):
                    return

                await dialog_manager.start(
                    model.OrganizationMenuStates.organization_menu,
                    mode=StartMode.RESET_STACK
                )

                self.logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_toggle_permission(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_toggle_permission",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                button_id = button.widget_id

                # –ú–∞–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª—é—á–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                permission_map = {
                    "toggle_no_moderation": "no_moderation",
                    "toggle_autoposting": "autoposting",
                    "toggle_add_employee": "add_employee",
                    "toggle_edit_permissions": "edit_permissions",
                    "toggle_top_up_balance": "top_up_balance",
                    "toggle_social_networks": "social_networks",
                }

                permission_key = permission_map.get(button_id)
                if not permission_key:
                    return

                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                permissions = dialog_manager.dialog_data.get("temp_permissions", {})

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                permissions[permission_key] = not permissions.get(permission_key, False)
                dialog_manager.dialog_data["temp_permissions"] = permissions

                # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                permission_names = {
                    "no_moderation": "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    "autoposting": "–ê–≤—Ç–æ-–ø–æ—Å—Ç–∏–Ω–≥",
                    "add_employee": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    "edit_permissions": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
                    "top_up_balance": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                    "social_networks": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π",
                }

                status = "–≤–∫–ª—é—á–µ–Ω–æ" if permissions[permission_key] else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
                permission_name = permission_names.get(permission_key, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ")

                await callback.answer(f"{permission_name}: {status}")
                await dialog_manager.update(dialog_manager.dialog_data)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", show_alert=True)
                raise

    async def handle_save_permissions(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_save_permissions",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                selected_account_id = int(dialog_manager.dialog_data.get("selected_account_id"))
                permissions = dialog_manager.dialog_data.get("temp_permissions", {})

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
                await self.kontur_employee_client.update_employee_permissions(
                    account_id=selected_account_id,
                    required_moderation=not permissions.get("no_moderation", False),
                    autoposting_permission=permissions.get("autoposting", False),
                    add_employee_permission=permissions.get("add_employee", False),
                    edit_employee_perm_permission=permissions.get("edit_permissions", False),
                    top_up_balance_permission=permissions.get("top_up_balance", False),
                    sign_up_social_net_permission=permissions.get("social_networks", False),
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤
                employee_state = await self.state_repo.state_by_account_id(selected_account_id)
                if employee_state:
                    await self.bot.send_message(
                        employee_state[0].tg_chat_id,
                        "‚ÑπÔ∏è –í–∞—à–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                        "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                    )

                self.logger.info("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                dialog_manager.dialog_data.pop("temp_permissions", None)
                dialog_manager.dialog_data.pop("original_permissions", None)

                await callback.answer("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", show_alert=True)

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await dialog_manager.switch_to(model.ChangeEmployeeStates.employee_detail)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", show_alert=True)
                raise

    async def handle_reset_permissions(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_reset_permissions",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                original = dialog_manager.dialog_data.get("original_permissions", {})
                dialog_manager.dialog_data["temp_permissions"] = original.copy()

                await callback.answer("‚Ü©Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
                await dialog_manager.update(dialog_manager.dialog_data)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_show_role_change(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_show_role_change",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
                await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_delete_employee(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "ChangeEmployeeService.handle_delete_employee",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                selected_account_id = int(dialog_manager.dialog_data.get("selected_account_id"))

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                employee = await self.kontur_employee_client.get_employee_by_account_id(
                    selected_account_id
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                await self.kontur_employee_client.delete_employee(selected_account_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee_state = await self.state_repo.state_by_account_id(selected_account_id)
                if employee_state:
                    await self.state_repo.change_user_state(
                        employee_state[0].id,
                        organization_id=0
                    )

                    await self.bot.send_message(
                        employee_state[0].tg_chat_id,
                        "‚ö†Ô∏è –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n"
                        "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )

                self.logger.info("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")

                await callback.answer(
                    f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    show_alert=True
                )

                # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                dialog_manager.dialog_data.pop("selected_account_id", None)
                dialog_manager.dialog_data.pop("temp_permissions", None)
                dialog_manager.dialog_data.pop("original_permissions", None)

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                await dialog_manager.switch_to(model.ChangeEmployeeStates.employee_list)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", show_alert=True)
                raise

    async def _check_alerts(self, dialog_manager: DialogManager) -> bool:
        state = await self._get_state(dialog_manager)

        vizard_alerts = await self.state_repo.get_vizard_video_cut_alert_by_state_id(
            state_id=state.id
        )
        if vizard_alerts:
            await dialog_manager.start(
                model.GenerateVideoCutStates.video_generated_alert,
                mode=StartMode.RESET_STACK
            )
            return True

        return False

    async def _get_state(self, dialog_manager: DialogManager) -> model.UserState:
        if hasattr(dialog_manager.event, 'message') and dialog_manager.event.message:
            chat_id = dialog_manager.event.message.chat.id
        elif hasattr(dialog_manager.event, 'chat'):
            chat_id = dialog_manager.event.chat.id
        else:
            raise ValueError("Cannot extract chat_id from dialog_manager")
        state = await self.state_repo.state_by_id(chat_id)
        if not state:
            raise ValueError(f"State not found for chat_id: {chat_id}")
        return state[0]
