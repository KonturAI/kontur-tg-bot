import re
from typing import Any
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode

from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model, common


class GenerateVideoCutDialogService(interface.IGenerateVideoCutDialogService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            state_repo: interface.IStateRepo,
            kontur_employee_client: interface.IKonturEmployeeClient,
            kontur_content_client: interface.IKonturContentClient,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.state_repo = state_repo
        self.kontur_employee_client = kontur_employee_client
        self.kontur_content_client = kontur_content_client

    async def get_youtube_input_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        with self.tracer.start_as_current_span(
                "GenerateVideoCutDialogService.get_youtube_input_data",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–µ
                data = {}

                self.logger.info(
                    "–î–∞–Ω–Ω—ã–µ –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ YouTube —Å—Å—ã–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: self._get_chat_id(dialog_manager),
                    }
                )

                span.set_status(Status(StatusCode.OK))
                return data

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                return {}

    async def handle_youtube_link_input(
            self,
            message: Message,
            message_input: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "GenerateVideoCutDialogService.handle_youtube_link_input",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                youtube_url = message.text.strip()

                # –í–∞–ª–∏–¥–∞—Ü–∏—è YouTube —Å—Å—ã–ª–∫–∏
                if not self._is_valid_youtube_url(youtube_url):
                    await message.answer(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=VIDEO_ID",
                        parse_mode="HTML"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                state = await self._get_state(dialog_manager)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                employee = await self.kontur_employee_client.get_employee_by_account_id(
                    state.account_id
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                await self.kontur_content_client.generate_video_cut(
                    state.organization_id,
                    state.account_id,
                    youtube_url,
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await message.answer(
                    "‚è≥ <b>–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</b>\n\n"
                    "–Ø —Å–æ–∑–¥–∞–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏.\n"
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
                    "üì© <b>–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã!</b>\n"
                    "–ì–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ß–µ—Ä–Ω–æ–≤–∏–∫–∏\" ‚Üí \"–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–æ–∫\"",
                    parse_mode="HTML"
                )



                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await dialog_manager.start(
                    model.MainMenuStates.main_menu,
                    mode=StartMode.RESET_STACK
                )

                self.logger.info(
                    "YouTube —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: message.chat.id,
                        "youtube_url": youtube_url,
                        "employee_id": employee.id,
                        "organization_id": employee.organization_id,
                    }
                )

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    def _is_valid_youtube_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube."""
        youtube_regex = re.compile(
            r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/'
            r'(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
        )
        return bool(youtube_regex.match(url))

    async def _get_state(self, dialog_manager: DialogManager) -> model.UserState:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        chat_id = self._get_chat_id(dialog_manager)
        state = await self.state_repo.state_by_id(chat_id)
        if not state:
            raise ValueError(f"State not found for chat_id: {chat_id}")
        return state[0]

    def _get_chat_id(self, dialog_manager: DialogManager) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ dialog_manager."""
        if hasattr(dialog_manager.event, 'message') and dialog_manager.event.message:
            return dialog_manager.event.message.chat.id
        elif hasattr(dialog_manager.event, 'chat'):
            return dialog_manager.event.chat.id
        else:
            raise ValueError("Cannot extract chat_id from dialog_manager")