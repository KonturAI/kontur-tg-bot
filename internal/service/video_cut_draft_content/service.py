import asyncio
from datetime import datetime, timezone, timedelta
import time
from typing import Any

from aiogram import Bot
from aiogram_dialog.api.entities import MediaId, MediaAttachment
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram_dialog import DialogManager, StartMode

from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model, common


class VideoCutsDraftDialogService(interface.IDraftVideoCutsDialogService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            bot: Bot,
            state_repo: interface.IStateRepo,
            kontur_employee_client: interface.IKonturEmployeeClient,
            kontur_organization_client: interface.IKonturOrganizationClient,
            kontur_content_client: interface.IKonturContentClient,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.bot = bot
        self.state_repo = state_repo
        self.kontur_employee_client = kontur_employee_client
        self.kontur_organization_client = kontur_organization_client
        self.kontur_content_client = kontur_content_client

    async def get_video_cut_list_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–∫—É"""
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.get_video_cut_list_data",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                state = await self._get_state(dialog_manager)

                # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                video_cuts = await self.kontur_content_client.get_video_cuts_by_organization(
                    organization_id=state.organization_id
                )

                if not video_cuts:
                    return {
                        "has_video_cut": False,
                        "video_cut_count": 0,
                        "period_text": "",
                    }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                dialog_manager.dialog_data["video_cuts_list"] = [video_cut.to_dict() for video_cut in video_cuts]

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (0 –µ—Å–ª–∏ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                if "current_index" not in dialog_manager.dialog_data:
                    dialog_manager.dialog_data["current_index"] = 0

                current_index = dialog_manager.dialog_data["current_index"]
                current_video_cut = model.VideoCut(**dialog_manager.dialog_data["video_cuts_list"][current_index])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
                tags = current_video_cut.tags or []
                tags_text = ", ".join(tags) if tags else ""

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
                period_text = self._get_period_text(video_cuts)

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –≤–∏–¥–µ–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
                video_media = None
                if current_video_cut.video_fid:
                    cache_buster = int(time.time())
                    video_url = f"https://kontur-media.ru/api/content/video-cut/{current_video_cut.id}/download?v={cache_buster}"

                    video_media = MediaAttachment(
                        url=video_url,
                        type=ContentType.VIDEO
                    )


                data = {
                    "has_video_cuts": True,
                    "period_text": period_text,
                    "video_name": current_video_cut.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    "video_description": current_video_cut.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    "has_tags": bool(tags),
                    "video_tags": tags_text,
                    "youtube_reference_short": current_video_cut.youtube_video_reference,
                    "created_at": self._format_datetime(current_video_cut.created_at),
                    "youtube_enabled": current_video_cut.youtube_source_id,
                    "instagram_enabled": current_video_cut.inst_source_id,
                    "has_video": bool(current_video_cut.video_fid),
                    "video_media": video_media,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
                    "current_index": current_index + 1,
                    "total_count": len(video_cuts),
                    "has_prev": current_index > 0,
                    "has_next": current_index < len(video_cuts) - 1,
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                dialog_manager.dialog_data["original_video_cut"] = {
                    "id": current_video_cut.id,
                    "name": current_video_cut.name,
                    "description": current_video_cut.description,
                    "tags": current_video_cut.tags or [],
                    "youtube_reference_url": current_video_cut.youtube_video_reference,
                    "video_fid": current_video_cut.video_fid,
                    "created_at": current_video_cut.created_at,
                }

                # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
                if "working_video_cut" not in dialog_manager.dialog_data:
                    dialog_manager.dialog_data["working_video_cut"] = dict(
                        dialog_manager.dialog_data["original_video_cut"])

                self.logger.info(
                    "–°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: self._get_chat_id(dialog_manager),
                        "video_cuts_count": len(video_cuts),
                        "current_index": current_index,
                    }
                )

                span.set_status(Status(StatusCode.OK))
                return data

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_navigate_video_cut(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_navigate_video_cut",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                current_index = dialog_manager.dialog_data.get("current_index", 0)
                video_cuts_list = dialog_manager.dialog_data.get("video_cuts_list", [])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if button.widget_id == "prev_video_cut":
                    new_index = max(0, current_index - 1)
                else:  # next_video_cut
                    new_index = min(len(video_cuts_list) - 1, current_index + 1)

                if new_index == current_index:
                    await callback.answer()
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
                dialog_manager.dialog_data["current_index"] = new_index

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
                dialog_manager.dialog_data.pop("working_video_cut", None)

                self.logger.info(
                    "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º –≤–∏–¥–µ–æ",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: callback.message.chat.id,
                        "from_index": current_index,
                        "to_index": new_index,
                    }
                )

                await callback.answer()
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
                raise

    async def handle_send_to_moderation(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_send_to_moderation",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
                if self._has_changes(dialog_manager):
                    await self._save_video_cut_changes(dialog_manager)

                original_video_cut = dialog_manager.dialog_data["original_video_cut"]
                video_cut_id = original_video_cut["id"]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
                await self.kontur_content_client.send_video_cut_to_moderation(
                    video_cut_id=video_cut_id
                )

                self.logger.info(
                    "–ß–µ—Ä–Ω–æ–≤–∏–∫ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: callback.message.chat.id,
                        "video_cut_id": video_cut_id,
                    }
                )

                await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", show_alert=True)

                # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ (–æ–Ω –±–æ–ª—å—à–µ –Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)
                await self._remove_current_video_cut_from_list(dialog_manager)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
                raise

    async def handle_publish_now(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_publish_now",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
                if self._has_changes(dialog_manager):
                    await self._save_video_cut_changes(dialog_manager)

                original_video_cut = dialog_manager.dialog_data["original_video_cut"]
                video_cut_id = original_video_cut["id"]

                # –ü—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ API
                # await self.kontur_content_client.publish_video_cut_now(
                #     video_cut_id=video_cut_id
                # )

                self.logger.info(
                    "–ß–µ—Ä–Ω–æ–≤–∏–∫ –≤–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: callback.message.chat.id,
                        "video_cut_id": video_cut_id,
                    }
                )

                await callback.answer("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", show_alert=True)

                # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
                await self._remove_current_video_cut_from_list(dialog_manager)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                raise

    async def handle_delete_video_cut(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_delete_video_cut",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                original_video_cut = dialog_manager.dialog_data["original_video_cut"]
                video_cut_id = original_video_cut["id"]

                # –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —á–µ—Ä–µ–∑ API
                # await self.kontur_content_client.delete_video_cut_video_cut(
                #     video_cut_id=video_cut_id
                # )

                self.logger.info(
                    "–ß–µ—Ä–Ω–æ–≤–∏–∫ –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω",
                    {
                        common.TELEGRAM_CHAT_ID_KEY: callback.message.chat.id,
                        "video_cut_id": video_cut_id,
                    }
                )

                await callback.answer("üóë –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω", show_alert=True)

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                await self._remove_current_video_cut_from_list(dialog_manager)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
                raise

    async def get_edit_preview_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–≤—å—é"""
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.get_edit_preview_data",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                if "working_video_cut" not in dialog_manager.dialog_data:
                    dialog_manager.dialog_data["working_video_cut"] = dict(
                        dialog_manager.dialog_data["original_video_cut"]
                    )

                working_video_cut = dialog_manager.dialog_data["working_video_cut"]
                original_video_cut = dialog_manager.dialog_data["original_video_cut"]

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
                tags = working_video_cut.get("tags", [])
                tags_text = ", ".join(tags) if tags else ""

                video_media = None
                if working_video_cut.get("video_fid"):
                    cache_buster = int(time.time())
                    video_url = f"https://kontur-media.ru/api/content/video-cut/{working_video_cut.get("id")}/download?v={cache_buster}"

                    video_media = MediaAttachment(
                        url=video_url,
                        type=ContentType.VIDEO
                    )

                data = {
                    "created_at": self._format_datetime(original_video_cut["created_at"]),
                    "youtube_reference": working_video_cut["youtube_reference_url"],
                    "video_name": working_video_cut["name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    "video_description": working_video_cut["description"] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    "has_tags": bool(tags),
                    "video_tags": tags_text,
                    "has_video": bool(working_video_cut.get("video_file_id") or working_video_cut.get("video_url")),
                    "video_media": video_media,
                    "has_changes": self._has_changes(dialog_manager),
                }

                span.set_status(Status(StatusCode.OK))
                return data

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_save_changes(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_save_changes",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                if not self._has_changes(dialog_manager):
                    await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                    return

                await callback.answer()
                loading_message = await callback.message.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await self._save_video_cut_changes(dialog_manager)

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                dialog_manager.dialog_data["original_video_cut"] = dict(dialog_manager.dialog_data["working_video_cut"])

                await loading_message.edit_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                await asyncio.sleep(2)
                try:
                    await loading_message.delete()
                except:
                    pass

                await dialog_manager.switch_to(model.DraftVideoCutsStates.video_cut_list)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                raise

    async def handle_edit_title_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_edit_title_save",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                new_title = text.strip()

                if not new_title:
                    await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return

                if len(new_title) > 100:  # YouTube Shorts –ª–∏–º–∏—Ç
                    await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è YouTube)")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é
                dialog_manager.dialog_data["working_video_cut"]["name"] = new_title

                await message.delete()
                await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                await dialog_manager.switch_to(model.DraftVideoCutsStates.edit_preview)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
                raise

    async def handle_edit_description_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_edit_description_save",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                new_description = text.strip()

                if not new_description:
                    await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return

                if len(new_description) > 2200:  # Instagram –ª–∏–º–∏—Ç
                    await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 2200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Instagram)")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é
                dialog_manager.dialog_data["working_video_cut"]["description"] = new_description

                await message.delete()
                await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                await dialog_manager.switch_to(model.DraftVideoCutsStates.edit_preview)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
                raise

    async def handle_edit_tags_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_edit_tags_save",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                tags_raw = text.strip()

                if not tags_raw:
                    new_tags = []
                else:
                    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
                    new_tags = [tag.strip() for tag in tags_raw.split(",")]
                    new_tags = [tag for tag in new_tags if tag]

                    if len(new_tags) > 15:  # YouTube –ª–∏–º–∏—Ç
                        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–≥–æ–≤ (–º–∞–∫—Å. 15 –¥–ª—è YouTube)")
                        return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é
                dialog_manager.dialog_data["working_video_cut"]["tags"] = new_tags

                await message.delete()
                await message.answer(f"‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({len(new_tags)} —à—Ç.)")
                await dialog_manager.switch_to(model.DraftVideoCutsStates.edit_preview)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤")
                raise

    async def handle_toggle_platform(
            self,
            callback: CallbackQuery,
            checkbox: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_toggle_platform",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                working_video_cut = dialog_manager.dialog_data["working_video_cut"]
                settings = working_video_cut.get("publication_settings", {})

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
                if checkbox.widget_id == "youtube_checkbox":
                    settings["youtube_enabled"] = not settings.get("youtube_enabled", True)
                elif checkbox.widget_id == "instagram_checkbox":
                    settings["instagram_enabled"] = not settings.get("instagram_enabled", True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∫–ª—é—á–µ–Ω–∞
                if not settings.get("youtube_enabled", True) and not settings.get("instagram_enabled", True):
                    await callback.answer("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", show_alert=True)
                    return

                dialog_manager.dialog_data["working_video_cut"]["publication_settings"] = settings

                await callback.answer()
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", show_alert=True)
                raise

    async def handle_schedule_publication(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_schedule_publication",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                working_video_cut = dialog_manager.dialog_data["working_video_cut"]
                settings = working_video_cut.get("publication_settings", {})

                if button.widget_id == "remove_schedule":
                    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    settings.pop("scheduled_time", None)
                    await callback.answer("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ", show_alert=True)
                else:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
                    tomorrow = datetime.now() + timedelta(days=1)
                    scheduled_time = tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
                    settings["scheduled_time"] = scheduled_time.isoformat()
                    await callback.answer("üìÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 10:00", show_alert=True)

                dialog_manager.dialog_data["working_video_cut"]["publication_settings"] = settings

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
                raise

    async def handle_back_to_video_cut_list(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_back_to_video_cut_list",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                await dialog_manager.switch_to(model.DraftVideoCutsStates.video_cut_list)
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_back_to_content_menu(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        with self.tracer.start_as_current_span(
                "DraftVideoCutsDialogService.handle_back_to_content_menu",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                await dialog_manager.start(
                    model.ContentMenuStates.content_menu,
                    mode=StartMode.RESET_STACK
                )

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def get_edit_title_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
        working_video_cut = dialog_manager.dialog_data.get("working_video_cut", {})
        return {
            "current_title": working_video_cut.get("name", ""),
        }

    async def get_edit_description_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        working_video_cut = dialog_manager.dialog_data.get("working_video_cut", {})
        description = working_video_cut.get("description", "")
        return {
            "current_description_length": len(description),
        }

    async def get_edit_tags_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤"""
        working_video_cut = dialog_manager.dialog_data.get("working_video_cut", {})
        tags = working_video_cut.get("tags", [])
        return {
            "has_tags": bool(tags),
            "current_tags": ", ".join(tags) if tags else "",
        }

    async def get_publication_settings_data(
            self,
            dialog_manager: DialogManager,
            **kwargs
    ) -> dict:
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        working_video_cut = dialog_manager.dialog_data.get("working_video_cut", {})
        settings = working_video_cut.get("publication_settings", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        scheduled_time = settings.get("scheduled_time")
        is_scheduled = bool(scheduled_time)
        scheduled_time_text = ""

        if is_scheduled:
            try:
                dt = datetime.fromisoformat(scheduled_time)
                scheduled_time_text = dt.strftime("%d.%m.%Y %H:%M")
            except:
                scheduled_time_text = scheduled_time

        return {
            "youtube_enabled": settings.get("youtube_enabled", True),
            "instagram_enabled": settings.get("instagram_enabled", True),
            "is_scheduled": is_scheduled,
            "scheduled_time": scheduled_time_text,
        }

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _has_changes(self, dialog_manager: DialogManager) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–µ–π"""
        original = dialog_manager.dialog_data.get("original_video_cut", {})
        working = dialog_manager.dialog_data.get("working_video_cut", {})

        if not original or not working:
            return False

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        fields_to_compare = ["name", "description", "tags"]
        for field in fields_to_compare:
            if original.get(field) != working.get(field):
                return True

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        original_settings = original.get("publication_settings", {})
        working_settings = working.get("publication_settings", {})

        if original_settings != working_settings:
            return True

        return False

    async def _save_video_cut_changes(self, dialog_manager: DialogManager) -> None:
        working_video_cut = dialog_manager.dialog_data["working_video_cut"]
        video_cut_id = working_video_cut["id"]

        # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ —á–µ—Ä–µ–∑ API
        await self.kontur_content_client.change_video_cut(
            video_cut_id=video_cut_id,
            name=working_video_cut["name"],
            description=working_video_cut["description"],
            tags=working_video_cut.get("tags", []),
        )

        self.logger.info(
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            {
                "video_cut_id": video_cut_id,
                "has_changes": self._has_changes(dialog_manager),
            }
        )

    async def _remove_current_video_cut_from_list(self, dialog_manager: DialogManager) -> None:
        video_cuts_list = dialog_manager.dialog_data.get("video_cuts_list", [])
        current_index = dialog_manager.dialog_data.get("current_index", 0)

        if video_cuts_list and current_index < len(video_cuts_list):
            video_cuts_list.pop(current_index)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if current_index >= len(video_cuts_list) and video_cuts_list:
                dialog_manager.dialog_data["current_index"] = len(video_cuts_list) - 1
            elif not video_cuts_list:
                dialog_manager.dialog_data["current_index"] = 0

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ
            dialog_manager.dialog_data.pop("working_video_cut", None)
            dialog_manager.dialog_data.pop("original_video_cut", None)

    def _format_datetime(self, dt: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if isinstance(dt, str):
                dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return str(dt)

    def _get_period_text(self, video_video_cuts: list) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
        if not video_video_cuts:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        dates = []
        for video_cut in video_video_cuts:
            if hasattr(video_cut, 'created_at') and video_cut.created_at:
                dates.append(video_cut.created_at)

        if not dates:
            return "–°–µ–≥–æ–¥–Ω—è"

        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        oldest_date = min(dates)

        try:
            if isinstance(oldest_date, str):
                oldest_dt = datetime.fromisoformat(oldest_date.replace('Z', '+00:00'))
            else:
                oldest_dt = oldest_date

            now = datetime.now(timezone.utc)
            delta = now - oldest_dt
            hours = delta.total_seconds() / 3600

            if hours < 24:
                return "–ó–∞ —Å–µ–≥–æ–¥–Ω—è"
            elif hours < 48:
                return "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è"
            elif hours < 168:  # –Ω–µ–¥–µ–ª—è
                return "–ó–∞ –Ω–µ–¥–µ–ª—é"
            else:
                return "–ó–∞ –º–µ—Å—è—Ü"
        except:
            return "–ó–∞ –Ω–µ–¥–µ–ª—é"

    async def _get_state(self, dialog_manager: DialogManager) -> model.UserState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = self._get_chat_id(dialog_manager)
        return await self._get_state_by_chat_id(chat_id)

    async def _get_state_by_chat_id(self, chat_id: int) -> model.UserState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ chat_id"""
        state = await self.state_repo.state_by_id(chat_id)
        if not state:
            raise ValueError(f"State not found for chat_id: {chat_id}")
        return state[0]

    def _get_chat_id(self, dialog_manager: DialogManager) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ dialog_manager"""
        if hasattr(dialog_manager.event, 'message') and dialog_manager.event.message:
            return dialog_manager.event.message.chat.id
        elif hasattr(dialog_manager.event, 'chat'):
            return dialog_manager.event.chat.id
        else:
            raise ValueError("Cannot extract chat_id from dialog_manager")