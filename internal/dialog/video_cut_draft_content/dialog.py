from aiogram_dialog import Window, Dialog, ShowMode
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Checkbox
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.media import DynamicMedia

from internal import interface, model


class VideoCutsDraftDialog(interface.IVideoCutsDraftDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            video_cut_draft_service: interface.IVideoCutsDraftService,
            video_cut_draft_getter: interface.IVideoCutsDraftGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.video_cut_draft_service = video_cut_draft_service
        self.video_cut_draft_getter = video_cut_draft_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_video_cut_list_window(),
            self.get_edit_preview_window(),
            self.get_edit_title_window(),
            self.get_edit_description_window(),
            self.get_edit_tags_window(),
            self.get_social_network_select_window(),
        )

    def get_video_cut_list_window(self) -> Window:
        return Window(
            Multi(
                Const("üé¨ <b>–¢–≤–æ–∏ –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–∫–∏</b>\n\n"),
                Case(
                    {
                        True: Multi(
                            Format("üìΩÔ∏è <b>{video_name}</b>\n"),
                            Format("üìù {video_description}\n\n"),
                            Case(
                                {
                                    True: Format("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <code>{video_tags}</code>\n"),
                                    False: Const("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <i>‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n"),
                                },
                                selector="has_tags"
                            ),
                            Format("üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{youtube_reference}'>YouTube</a>\n\n"),
                            Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code>\n"),
                        ),
                        False: Multi(
                            Const("üìÇ <b>–ü—É—Å—Ç–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö</b>\n\n"),
                            Const("üí° <i>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏</i>"),
                        ),
                    },
                    selector="has_video_cuts"
                ),
                sep="",
            ),

            DynamicMedia(
                "video_media",
                when="has_video"
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥"),
                    id="prev_video_cut",
                    on_click=self.video_cut_draft_service.handle_navigate_video_cut,
                    when="has_prev",
                ),
                Button(
                    Format("üìä {current_index}/{video_cuts_count}"),
                    id="counter",
                    on_click=lambda c, b, d: c.answer("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º"),
                    when="has_video_cuts",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥"),
                    id="next_video_cut",
                    on_click=self.video_cut_draft_service.handle_navigate_video_cut,
                    when="has_next",
                ),
                when="has_video_cuts",
            ),

            Column(
                Row(
                    Button(
                        Const("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                        id="edit",
                        on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_preview),
                        when="has_video_cuts",
                    ),
                ),
                Button(
                    Const("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"),
                    id="send_to_moderation",
                    on_click=self.video_cut_draft_service.handle_send_to_moderation,
                    when="not_can_publish",
                ),
                Button(
                    Const("üåê –í—ã–±—Ä–∞—Ç—å —Å–æ—Ü—Å–µ—Ç–∏"),
                    id="select_social_network",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.social_network_select,
                                                         ShowMode.EDIT),
                    when="can_publish",
                ),
                Button(
                    Const("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"),
                    id="publish_now",
                    on_click=self.video_cut_draft_service.handle_publish_now,
                    when="can_publish",
                ),
                Row(
                    Button(
                        Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                        id="delete",
                        on_click=self.video_cut_draft_service.handle_delete_video_cut,
                        when="has_video_cuts",
                    ),
                ),
                when="has_video_cuts",
            ),

            Row(
                Button(
                    Const("‚óÄÔ∏è –ú–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                    id="back_to_content_menu",
                    on_click=self.video_cut_draft_service.handle_back_to_content_menu,
                ),
            ),

            state=model.VideoCutsDraftStates.video_cut_list,
            getter=self.video_cut_draft_getter.get_video_cut_list_data,
            parse_mode="HTML",
        )

    def get_edit_preview_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>\n\n"),

                Format("üìΩÔ∏è <b>{video_name}</b>\n\n"),
                Format("üìù {video_description}\n\n"),
                Case(
                    {
                        True: Format("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <code>{video_tags}</code>\n"),
                        False: Const("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <i>‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n"),
                    },
                    selector="has_tags"
                ),
                Format("üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{youtube_reference}'>YouTube</a>\n\n"),
                Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code>\n"),
                Case(
                    {
                        True: Const("\n\n‚ö†Ô∏è <b><i>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!</i></b>"),
                        False: Const(""),
                    },
                    selector="has_changes"
                ),
                Const("\n\nüìå <b>–ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?</b>"),
                sep="",
            ),

            DynamicMedia(
                "video_media",
                when="has_video"
            ),

            Column(
                Button(
                    Const("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
                    id="edit_title",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_title),
                ),
                Button(
                    Const("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                    id="edit_description",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_description),
                ),
                Button(
                    Const("üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"),
                    id="edit_tags",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_tags),
                ),
            ),

            Row(
                Button(
                    Const("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                    id="save_changes",
                    on_click=self.video_cut_draft_service.handle_save_changes,
                    when="has_changes",
                ),
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
                    id="back_to_video_cut_list",
                    on_click=self.video_cut_draft_service.handle_back_to_video_cut_list,
                ),
            ),

            state=model.VideoCutsDraftStates.edit_preview,
            getter=self.video_cut_draft_getter.get_edit_preview_data,
            parse_mode="HTML",
        )

    def get_edit_title_window(self) -> Window:
        return Window(
            Multi(
                Const("üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"),
                Format("üìã <b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n<i>{current_title}</i>\n\n"),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n\n"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</b>\n"),
                Const("üé¨ YouTube Shorts: <code>–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤</code>\n"),
                Const("üì± Instagram Reels: <code>–º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤</code>"),
                sep="",
            ),

            TextInput(
                id="title_input",
                on_success=self.video_cut_draft_service.handle_edit_title_save,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_preview),
            ),

            state=model.VideoCutsDraftStates.edit_title,
            getter=self.video_cut_draft_getter.get_edit_title_data,
            parse_mode="HTML",
        )

    def get_edit_description_window(self) -> Window:
        """–û–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
        return Window(
            Multi(
                Const("üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"),
                Format("üìä <b>–î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</b> <code>{current_description_length} —Å–∏–º–≤–æ–ª–æ–≤</code>\n\n"),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</b>\n"),
                Const("üé¨ YouTube: <code>–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤</code>\n"),
                Const("üì± Instagram: <code>–º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤</code>\n\n"),
                Const("üí° <i>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥</i>"),
                sep="",
            ),

            TextInput(
                id="description_input",
                on_success=self.video_cut_draft_service.handle_edit_description_save,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_preview),
            ),

            state=model.VideoCutsDraftStates.edit_description,
            getter=self.video_cut_draft_getter.get_edit_description_data,
            parse_mode="HTML",
        )

    def get_edit_tags_window(self) -> Window:
        return Window(
            Multi(
                Const("üè∑Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤</b>\n\n"),
                Case(
                    {
                        True: Format("üìã <b>–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:</b>\n<code>{current_tags}</code>\n\n"),
                        False: Const("üìã <b>–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:</b> <i>‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n\n"),
                    },
                    selector="has_tags"
                ),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"),
                Const("üí° <b>–ü—Ä–∏–º–µ—Ä:</b> <code>—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–±—É—á–µ–Ω–∏–µ, shorts</code>\n\n"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"),
                Const("üé¨ YouTube: <code>–º–∞–∫—Å–∏–º—É–º 15 —Ç–µ–≥–æ–≤</code>\n"),
                Const("üì± Instagram: <code>–º–∞–∫—Å–∏–º—É–º 30 —Ö–µ—à—Ç–µ–≥–æ–≤</code>\n\n"),
                Const("üóëÔ∏è <i>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤</i>"),
                sep="",
            ),

            TextInput(
                id="tags_input",
                on_success=self.video_cut_draft_service.handle_edit_tags_save,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.edit_preview),
            ),

            state=model.VideoCutsDraftStates.edit_tags,
            getter=self.video_cut_draft_getter.get_edit_tags_data,
            parse_mode="HTML",
        )

    def get_social_network_select_window(self) -> Window:
        return Window(
            Multi(
                Const("üåê <b>–í—ã–±–æ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π</b>\n\n"),
                Case(
                    {
                        True: Multi(
                            Const("‚ö†Ô∏è <b>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π!</b>\n\n"),
                            Const(
                                "üîó <i>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ-–Ω–∞—Ä–µ–∑–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.</i>\n\n"),
                            Const("üë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π."),
                        ),
                        False: Multi(
                            Const("üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"),
                            Const("üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</i>"),
                        ),
                    },
                    selector="no_connected_networks"
                ),
                sep="",
            ),

            Column(
                Checkbox(
                    Const("‚úÖ üé¨ YouTube Shorts"),
                    Const("‚¨ú üé¨ YouTube Shorts"),
                    id="youtube_checkbox",
                    default=False,
                    on_state_changed=self.video_cut_draft_service.handle_toggle_social_network,
                    when="youtube_connected",
                ),
                Checkbox(
                    Const("‚úÖ üì± Instagram Reels"),
                    Const("‚¨ú üì± Instagram Reels"),
                    id="instagram_checkbox",
                    default=False,
                    on_state_changed=self.video_cut_draft_service.handle_toggle_social_network,
                    when="instagram_connected",
                ),
                when="has_available_networks",
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
                id="back_to_video_cut_list_no_networks",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutsDraftStates.video_cut_list),
                when="no_connected_networks",
            ),

            state=model.VideoCutsDraftStates.social_network_select,
            getter=self.video_cut_draft_getter.get_social_network_select_data,
            parse_mode="HTML",
        )
